# Parameters 
$p_{candidate\_connections}(conn)$ 
& The number of connections that may be invested in. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_availability\_factor}(conn)$ 
& Availability of the connection, acting as a multiplier on its connection\_capacity. Typically between 0-1. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_flow\_cost}(conn)$ 
& Variable costs of a flow through a connection. E.g. EUR/MWh of energy throughput. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_investment\_cost}(conn)$ 
& The per unit investment cost for the connection over the connection\_investment\_lifetime. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_investment\_lifetime}(conn)$ 
& Determines the minimum investment lifetime of a connection. Once invested, it remains in service for this long. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_reactance}(conn)$ 
& The per unit reactance of a connection. 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{connection\_reactance\_base}(conn)$ 
& If the reactance is given for a p.u. (e.g. p.u. = 100MW), the connection\_reactance\_base can be set to perform this conversion (e.g. $\times 100$). 
The parameter is defined under the SpineOpt object class \textit{connection}. \\ 

$p_{big\_m}(m)$ 
& Sufficiently large number used for linearization bilinear terms, e.g. to enforce bidirectional flow for gas pipielines. 
The parameter is defined under the SpineOpt object class \textit{model}. \\ 

$p_{balance\_type}(n)$ 
& A selector for how the :nodal\_balance constraint should be handled. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{candidate\_storages}(n)$ 
& Determines the maximum number of new storages which may be invested in. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{demand}(n)$ 
& Demand for the commodity of a node. Energy gains can be represented using negative demand. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{downward\_reserve}(n)$ 
& Identifier for nodes providing downward reserves. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{frac\_state\_loss}(n)$ 
& Self-discharge coefficient for node\_state variables. Effectively, represents the 'loss power per unit of state'. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{has\_state}(n)$ 
& A boolean flag for whether a node has a node\_state variable. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{is\_reserve\_node}(n)$ 
& A boolean flag for whether a node is acting as a reserve\_node. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{minimum\_reserve\_activation\_time}(n)$ 
& Duration a certain reserve product needs to be online/available. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{node\_slack\_penalty}(n)$ 
& A penalty cost for node\_slack\_pos and node\_slack\_neg variables. The slack variables won't be included in the model unless there's a cost defined for them. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{node\_state\_cap}(n)$ 
& The maximum permitted value for a node\_state variable. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{node\_state\_min}(n)$ 
& The minimum permitted value for a node\_state variable. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{state\_coeff}(n)$ 
& Represents the commodity content of a node\_state variable in respect to the unit\_flow and connection\_flow variables. Essentially, acts as a coefficient on the node\_state variable in the :node\_injection constraint. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{storage\_investment\_cost}(n)$ 
& Determines the investment cost per unit state\_cap over the investment life of a storage. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{storage\_investment\_lifetime}(n)$ 
& Minimum lifetime for storage investment decisions. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{tax\_in\_unit\_flow}(n)$ 
& Tax costs for incoming unit\_flows on this node. E.g. EUR/MWh. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{tax\_net\_unit\_flow}(n)$ 
& Tax costs for net incoming and outgoing unit\_flows on this node. Incoming flows accrue positive net taxes, and outgoing flows accrue negative net taxes. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{tax\_out\_unit\_flow}(n)$ 
& Tax costs for outgoing unit\_flows from this node. E.g. EUR/MWh. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{upward\_reserve}(n)$ 
& Identifier for nodes providing upward reserves. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{max\_node\_pressure}(n)$ 
& Maximum allowed gas pressure at node. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{min\_node\_pressure}(n)$ 
& Minimum allowed gas pressure at node. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{max\_voltage\_angle}(n)$ 
& Maximum allowed voltage angle at node. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{min\_voltage\_angle}(n)$ 
& Minimum allowed voltage angle at node. 
The parameter is defined under the SpineOpt object class \textit{node}. \\ 

$p_{weight}(tb)$ 
& Weighting factor of the temporal block associated with the objective function. 
The parameter is defined under the SpineOpt object class \textit{temporal\_block}. \\ 

$p_{candidate\_units}(u)$ 
& Number of units which may be additionally constructed. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{curtailment\_cost}(u)$ 
& Costs for curtailing generation. Essentially, accrues costs whenever unit\_flow not operating at its maximum available capacity. E.g. EUR/MWh. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{fom\_cost}(u)$ 
& Fixed operation and maintenance costs of a unit. Essentially, a cost coefficient on the number\_of\_units and unit\_capacity parameters. E.g. EUR/MW. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{min\_down\_time}(u)$ 
& Minimum downtime of a unit after it shuts down. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{min\_up\_time}(u)$ 
& Minimum uptime of a unit after it starts up. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{number\_of\_units}(u)$ 
& Denotes the number of 'sub units' aggregated to form the modelled unit. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{shut\_down\_cost}(u)$ 
& Costs of shutting down a 'sub unit', e.g. EUR/shutdown. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{start\_up\_cost}(u)$ 
& Costs of starting up a 'sub unit', e.g. EUR/startup. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{unit\_availability\_factor}(u)$ 
& Availability of the unit, acting as a multiplier on its unit\_capacity. Typically between 0-1. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{unit\_investment\_cost}(u)$ 
& Investment cost per 'sub unit' built. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{unit\_investment\_lifetime}(u)$ 
& Minimum lifetime for unit investment decisions. 
The parameter is defined under the SpineOpt object class \textit{unit}. \\ 

$p_{constraint\_sense}(uc)$ 
& A selector for the sense of the unit\_constraint. 
The parameter is defined under the SpineOpt object class \textit{unit\_constraint}. \\ 

$p_{right\_hand\_side}(uc)$ 
& The right-hand side, constant term in a unit\_constraint. Can be time-dependent and used e.g. for complicated efficiency approximations. 
The parameter is defined under the SpineOpt object class \textit{unit\_constraint}. \\ 

$p_{connection\_capacity}(conn, n)$ 
& Limits the connection\_flow variable from the from\_node. from\_node can be a group of nodes, in which case the sum of the connection\_flow is constrained. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_from\_node}. \\ 

$p_{connection\_conv\_cap\_to\_flow}(conn, n)$ 
& Optional coefficient for connection\_capacity unit conversions in the case that the connection\_capacity value is incompatible with the desired connection\_flow units. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_from\_node}. \\ 

$p_{connection\_emergency\_capacity}(conn, n)$ 
& Post contingency flow capacity of a connection. Sometimes referred to as emergency rating. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_from\_node}. \\ 

$p_{connection\_flow\_coefficient}(conn, n, uc)$ 
& defines the unit constraint coefficient on the connection flow variable in the from direction. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_from\_node\_\_unit\_constraint"}. \\ 

$p_{fix\_ratio\_out\_in\_connection\_flow}(conn, n_1, n_2)$ 
& Fix the ratio between the connection\_flow from the first node $n_1$ and the connection\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{max\_ratio\_out\_in\_connection\_flow}(conn, n_1, n_2)$ 
& Maximum ratio between the connection\_flow from the first node $n_1$ and the connection\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{min\_ratio\_out\_in\_connection\_flow}(conn, n_1, n_2)$ 
& Minimum ratio between the connection\_flow from the first node $n_1$ and the connection\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{fixed\_pressure\_constant\_1}(conn, n_1, n_2)$ 
& Fixed pressure points for pipelines for the outer approximation of the Weymouth approximation. The direction of flow is the first node $n_1$ in the relationship to the second node $n_2$ in the relationship. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{fixed\_pressure\_constant\_0}(conn, n_1, n_2)$ 
& Fixed pressure points for pipelines for the outer approximation of the Weymouth approximation. The direction of flow is the first node $n_1$ in the relationship to the second node $n_2$ in the relationship. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{compression\_factor}(conn, n_1, n_2)$ 
& The compression factor establishes a compression from an origin node to a receiving node, which are connected through a connection. The first node $n_1$ corresponds to the origin node, the second to the (compressed) destination node. Typically the value is $\geq 1$. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{connection\_linepack\_constant}(conn, n_1, n_2)$ 
& The linepack constant is a property of gas pipelines and relates the linepack to the pressure of the adjacent nodes. 
The parameter is defined under the SpineOpt relationship class \textit{connection\_\_node\_\_node}. \\ 

$p_{diff\_coeff}(n_1, n_2)$ 
& Commodity diffusion coefficient between two nodes $n_1$ and $n_2$. Effectively, denotes the *diffusion power per unit of state* from the first node $n_1$ to the second. 
The parameter is defined under the SpineOpt relationship class \textit{node\_\_node}. \\ 

$p_{cyclic\_condition}(n, tb)$ 
& If the cyclic condition is set to true for a storage node, the node\_state at the end of the optimisation window has to be larger than or equal to the initial storage state. 
The parameter is defined under the SpineOpt relationship class \textit{node\_\_temporal\_block}. \\ 

$p_{demand\_coefficient}(n, uc)$ 
& coefficient of the specified node's demand in the specified unit constraint. 
The parameter is defined under the SpineOpt relationship class \textit{node\_\_unit\_constraint}. \\ 

$p_{node\_state\_coefficient}(n, uc)$ 
& Coefficient of the specified node's state variable in the specified unit constraint. 
The parameter is defined under the SpineOpt relationship class \textit{node\_\_unit\_constraint}. \\ 

$p_{fuel\_cost}(u, n)$ 
& Variable fuel costs than can be attributed to a unit\_flow. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{reserve\_procurement\_cost}(u, n)$ 
& Procurement cost for reserves. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{max\_res\_shutdown\_ramp}(u, n)$ 
& Max. downward reserve ramp for online units scheduled to shut down for reserve provision. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{max\_res\_startup\_ramp}(u, n)$ 
& Maximum non-spinning reserve ramp-up for startups. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{max\_shutdown\_ramp}(u, n)$ 
& Max. downward ramp for units shutting down. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{max\_startup\_ramp}(u, n)$ 
& Maximum ramp-up during startups. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{min\_res\_shutdown\_ramp}(u, n)$ 
& Minimum non-spinning reserve ramp-down for online units providing reserves during shut-downs. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{min\_res\_startup\_ramp}(u, n)$ 
& Minimum non-spinning reserve ramp-up for startups. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{min\_shutdown\_ramp}(u, n)$ 
& Minimum ramp-up during startups. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{min\_startup\_ramp}(u, n)$ 
& Minimum ramp-up during startups. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{minimum\_operating\_point}(u, n)$ 
& Minimum level for the unit\_flow relative to the units\_on online capacity. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{operating\_points}(u, n)$ 
& Operating points for piecewise-linear unit efficiency approximations. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{ramp\_down\_cost}(u, n)$ 
& Costs for ramping down. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{ramp\_down\_limit}(u, n)$ 
& Limit the maximum ramp-down rate of an online unit, given as a fraction of the unit\_capacity. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{ramp\_up\_cost}(u, n)$ 
& Costs for ramping up. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{ramp\_up\_limit}(u, n)$ 
& Limit the maximum ramp-up rate of an online unit, given as a fraction of the unit\_capacity. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{unit\_capacity}(u, n)$ 
& Maximum unit\_flow capacity of a single 'sub\_unit' of the unit. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{unit\_conv\_cap\_to\_flow}(u, n)$ 
& Optional coefficient for unit\_capacity unit conversions in the case the unit\_capacity value is incompatible with the desired unit\_flow units. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{vom\_cost}(u, n)$ 
& Variable operating costs of a unit\_flow variable. E.g. EUR/MWh. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node}. \\ 

$p_{unit\_flow\_coefficient}(u, n, uc)$ 
& Coefficient of a unit\_flow variable for a custom unit\_constraint. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_from\_node\_\_unit\_constraint}. \\ 

$p_{fix\_ratio\_in\_in\_unit\_flow}(u, n_1, n_2)$ 
& Fix the ratio between two unit\_flows coming into the unit from the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{fix\_ratio\_in\_out\_unit\_flow}(u, n_1, n_2)$ 
& Fix the ratio between an incoming unit\_flow from the first node $n_1$ and an outgoing unit\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{fix\_ratio\_out\_in\_unit\_flow}(u, n_1, n_2)$ 
& Fix the ratio between an outgoing unit\_flow to the first node $n_1$ and an incoming unit\_flow from the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{fix\_ratio\_out\_out\_unit\_flow}(u, n_1, n_2)$ 
& Fix the ratio between two unit\_flows going from the unit into the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{max\_ratio\_in\_in\_unit\_flow}(u, n_1, n_2)$ 
& Maximum ratio between two unit\_flows coming into the unit from the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{max\_ratio\_in\_out\_unit\_flow}(u, n_1, n_2)$ 
& Maximum ratio between an incoming unit\_flow from the first node $n_1$ and an outgoing unit\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{max\_ratio\_out\_in\_unit\_flow}(u, n_1, n_2)$ 
& Maximum ratio between an outgoing unit\_flow to the first node $n_1$ and an incoming unit\_flow from the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{max\_ratio\_out\_out\_unit\_flow}(u, n_1, n_2)$ 
& Maximum ratio between two unit\_flows going from the unit into the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{min\_ratio\_in\_in\_unit\_flow}(u, n_1, n_2)$ 
& Minimum ratio between two unit\_flows coming into the unit from the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{min\_ratio\_in\_out\_unit\_flow}(u, n_1, n_2)$ 
& Minimum ratio between an incoming unit\_flow from the first node $n_1$ and an outgoing unit\_flow to the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{min\_ratio\_out\_in\_unit\_flow}(u, n_1, n_2)$ 
& Minimum ratio between an outgoing unit\_flow to the first node $n_1$ and an incoming unit\_flow from the second node $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{min\_ratio\_out\_out\_unit\_flow}(u, n_1, n_2)$ 
& Minimum ratio between two unit\_flows going from the unit into the two nodes $n_1$ and $n_2$. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{unit\_incremental\_heat\_rate}(u, n_1, n_2)$ 
& Standard piecewise incremental heat rate where node1 is assumed to be the fuel and node2 is assumed to be electricity. Assumed monotonically increasing. Array type or single coefficient where the number of coefficients must match the dimensions of unit\_operating\_points. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{unit\_idle\_heat\_rate}(u, n_1, n_2)$ 
& Flow from node1 per unit time and per units\_on that results in no additional flow to node2. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{unit\_start\_flow}(u, n_1, n_2)$ 
& Flow from node1 that is incurred when a unit is started up. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_node\_\_node}. \\ 

$p_{units\_on\_coefficient}(u, uc)$ 
& Coefficient of a units\_on variable for a custom unit\_constraint. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_unit\_constraint}. \\ 

$p_{units\_started\_up\_coefficient}(u, uc)$ 
& Coefficient of a units\_started\_up variable for a custom unit\_constraint. 
The parameter is defined under the SpineOpt relationship class \textit{unit\_\_unit\_constraint}. \\ 

